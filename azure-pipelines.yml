variables:
  GH_TOKEN: $(ghToken)
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

trigger:
  batch: true
  branches:
    include:
      - master

pr:
  - master

pool:
  vmImage: 'ubuntu-latest'

steps:
  - checkout: self
    persistCredentials: true

  - task: NodeTool@0
    inputs:
      versionSpec: '16.x'
    displayName: 'Install Node.js'

  - task: Cache@2
    inputs:
      key: 'yarn | "$(Agent.OS)" | yarn.lock'
      path: '$(YARN_CACHE_FOLDER)'

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'yarn install --frozen-lockfile'
    displayName: 'yarn install ignoring scripts'

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'yarn build'
    displayName: 'yarn build'

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'yarn test'
    displayName: 'yarn test'

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'CODECOV_TOKEN=$(CODECOV_TOKEN) yarn codecov'
    displayName: 'yarn codecov'

  - powershell: |
      $git = git config --global core.safecrlf false
      Write-Output $git
      $yarn = yarn cross-env GH_TOKEN=$(GH_TOKEN) CI=true GIT_USERNAME=marceloavf-bot GIT_EMAIL=marceloavf3@hotmail.com semantic-release
      Write-Output $yarn

      # Add a build tag if version is bumped
      if ($yarn -match "The next release version is") {
        Write-Host "##vso[build.addbuildtag]release"
        Write-Output ("##vso[task.setvariable variable=ShouldRelease;]true")
      } else {
        Write-Output "No Bump, this build don't need to be released"
      }
    displayName: '(only master) Yarn run semantic-release and add tag "release" if necessary'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - powershell: |
      $package_version = (Get-Content -Raw -Path package.json | ConvertFrom-Json).version

      Write-Output "Setting version '$package_version'."

      Write-Host "##vso[build.updatebuildnumber]$package_version"
    displayName: '(only master) Package version'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - bash: yarn package --version $(Build.BuildNumber) --noversiontransform
    displayName: '(only when bump version) Yarn package'
    condition: and(succeeded(), eq(variables['ShouldRelease'], 'true'))

  - task: CopyFiles@2
    displayName: '(only when bump version) Copy Files to: $(build.artifactstagingdirectory)'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/.BuildOutput/'
      Contents: '**/*.vsix'
      TargetFolder: '$(build.artifactstagingdirectory)'
      CleanTargetFolder: true
    condition: and(succeeded(), eq(variables['ShouldRelease'], 'true'))

  - task: PublishBuildArtifacts@1
    displayName: '(only when bump version) Publish Artifact: digitalocean-tools-vsts'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      ArtifactName: 'digitalocean-tools-vsts'
    condition: and(succeeded(), eq(variables['ShouldRelease'], 'true'))

